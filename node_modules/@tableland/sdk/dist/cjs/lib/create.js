"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const tablelandCalls = __importStar(require("./tableland-calls.js"));
const eth_calls_js_1 = require("./eth-calls.js");
/**
 * Registers an NFT with the Tableland Ethereum smart contract, then uses that to register
 * a new Table on Tableland. This method returns after the tableId has been minted, but not
 * nessessarily before the Tableland network has picked up the CREATE TABLE event. Use
 * the `receipt` method on the returned `txnHash` to check the status of the table.
 * @param {string} schema SQL table schema.
 * @returns {string} A Promise that resolves to a pending table creation receipt.
 */
function create(schema, prefix = "") {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { chainId } = this.options;
        const query = `CREATE TABLE ${prefix}_${chainId} (${schema});`;
        // This "dryrun" is done to validate that the query statement is considered valid.
        // We check this before minting the token, so the caller won't succeed at minting a token
        // then fail to create the table on the Tableland network
        yield tablelandCalls.hash.call(this, query);
        const txn = yield eth_calls_js_1.registerTable.call(this, query);
        const [, event] = (_a = txn.events) !== null && _a !== void 0 ? _a : [];
        const txnHash = txn.transactionHash;
        const blockNumber = txn.blockNumber;
        const tableId = (_b = event === null || event === void 0 ? void 0 : event.args) === null || _b === void 0 ? void 0 : _b.tableId;
        const name = `${prefix}_${chainId}_${tableId}`;
        return { tableId, prefix, chainId, txnHash, blockNumber, name };
    });
}
exports.create = create;
//# sourceMappingURL=create.js.map