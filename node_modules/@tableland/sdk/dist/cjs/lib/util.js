"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.camelCaseKeys = exports.SUPPORTED_CHAINS = exports.btoa = exports.getSigner = void 0;
const ethers_1 = require("ethers");
const camelcase_1 = __importDefault(require("camelcase"));
const proxies_js_1 = require("@tableland/evm/proxies.js");
function getSigner() {
    return __awaiter(this, void 0, void 0, function* () {
        yield globalThis.ethereum.request({ method: "eth_requestAccounts" });
        const provider = new ethers_1.ethers.providers.Web3Provider(globalThis.ethereum);
        const signer = provider.getSigner();
        return signer;
    });
}
exports.getSigner = getSigner;
// From https://www.npmjs.com/package/btoa
const polyfills = {
    btoa: function (str) {
        const buffer = Buffer.from(str, "binary");
        return buffer.toString("base64");
    },
};
exports.btoa = (_a = globalThis.btoa) !== null && _a !== void 0 ? _a : polyfills.btoa;
exports.SUPPORTED_CHAINS = {
    // Testnet
    "ethereum-goerli": {
        name: "goerli",
        phrase: "Ethereum Goerli",
        chainId: 5,
        contract: proxies_js_1.proxies["ethereum-goerli"],
        host: "https://testnet.tableland.network",
    },
    "optimism-kovan": {
        name: "optimism-kovan",
        phrase: "Optimism Kovan",
        chainId: 69,
        contract: proxies_js_1.proxies["optimism-kovan"],
        host: "https://testnet.tableland.network",
    },
    "polygon-mumbai": {
        name: "maticmum",
        phrase: "Polygon Testnet",
        chainId: 80001,
        contract: proxies_js_1.proxies["polygon-mumbai"],
        host: "https://testnet.tableland.network",
    },
    // staging
    "optimism-kovan-staging": {
        name: "optimism-kovan",
        phrase: "Optimism Kovan",
        chainId: 69,
        contract: proxies_js_1.proxies["optimism-kovan-staging"],
        host: "https://staging.tableland.network",
    },
    "local-tableland": {
        name: "localhost",
        phrase: "Local Tableland",
        chainId: 31337,
        contract: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        host: "http://localhost:8080",
    },
    // Testing
    custom: {
        name: "localhost",
        phrase: "Custom Chain",
        chainId: 31337,
        // If building locally you can put your contract address and host here or use the contract connection option
        contract: "",
        host: "",
    },
};
// Take an Object with any symantic for key naming and return a new Object with keys that are lowerCamelCase
// Example: `camelCaseKeys({structure_hash: "123"})` returns `{structureHash: "123"}`
function camelCaseKeys(obj) {
    return Object.fromEntries(Object.entries(obj).map((entry) => {
        const key = entry[0];
        const val = entry[1];
        return [(0, camelcase_1.default)(key), val];
    }));
}
exports.camelCaseKeys = camelCaseKeys;
//# sourceMappingURL=util.js.map