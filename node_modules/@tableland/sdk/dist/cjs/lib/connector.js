"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connect = void 0;
const list_js_1 = require("./list.js");
const query_js_1 = require("./query.js");
const create_js_1 = require("./create.js");
const hash_js_1 = require("./hash.js");
const siwe_js_1 = require("./siwe.js");
const tableland_calls_js_1 = require("./tableland-calls.js");
const util_js_1 = require("./util.js");
/**
 * Create client connection with Tableland, EVM, and Gateway.
 * @param options Options to control client connection.
 * @returns Promise that resolves to a Connection object.
 */
function connect(options) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        const network = (_a = options.network) !== null && _a !== void 0 ? _a : "testnet";
        let chain = (_b = options.chain) !== null && _b !== void 0 ? _b : "ethereum-goerli";
        if (network === "custom" && !options.host) {
            throw new Error('`host` must be provided if using "custom" network');
        }
        if (!["testnet", "staging", "custom"].includes(network)) {
            throw new Error("unsupported network specified");
        }
        const signer = options.signer;
        if (signer && signer.provider) {
            // Set params with provider network info if not explicitly given in options
            if (!options.chain && !options.chainId) {
                const { name } = yield signer.provider.getNetwork();
                const found = Object.entries(util_js_1.SUPPORTED_CHAINS).find(([, chainEntry]) => chainEntry.name === name);
                if (found) {
                    chain = found[0];
                }
                else {
                    throw new Error("proivder chain mismatch. Switch your wallet connection and reconnect");
                }
            }
        }
        const info = util_js_1.SUPPORTED_CHAINS[chain];
        if (!info && !options.chainId) {
            throw new Error("unsupported chain information. See `SUPPORTED_CHAINS` for options");
        }
        const host = (_c = options.host) !== null && _c !== void 0 ? _c : info.host;
        const chainId = (_d = options.chainId) !== null && _d !== void 0 ? _d : info.chainId;
        // We can override the contract address here for any supported network
        const contract = (_e = options.contract) !== null && _e !== void 0 ? _e : info.contract;
        // If a token was provided, we cache it
        const token = options.token;
        const connectionObject = {
            token,
            signer,
            options: {
                network,
                host,
                chain,
                chainId,
                contract,
            },
            get list() {
                return list_js_1.list;
            },
            get read() {
                return query_js_1.read;
            },
            get write() {
                return query_js_1.write;
            },
            get create() {
                return create_js_1.create;
            },
            get hash() {
                return hash_js_1.hash;
            },
            get receipt() {
                return tableland_calls_js_1.receipt;
            },
            get siwe() {
                return siwe_js_1.siwe;
            },
        };
        return connectionObject;
    });
}
exports.connect = connect;
//# sourceMappingURL=connector.js.map