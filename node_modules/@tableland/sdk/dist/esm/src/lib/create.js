var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as tablelandCalls from "./tableland-calls.js";
import { registerTable } from "./eth-calls.js";
/**
 * Registers an NFT with the Tableland Ethereum smart contract, then uses that to register
 * a new Table on Tableland. This method returns after the tableId has been minted, but not
 * nessessarily before the Tableland network has picked up the CREATE TABLE event. Use
 * the `receipt` method on the returned `txnHash` to check the status of the table.
 * @param {string} schema SQL table schema.
 * @returns {string} A Promise that resolves to a pending table creation receipt.
 */
export function create(schema, prefix = "") {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { chainId } = this.options;
        const query = `CREATE TABLE ${prefix}_${chainId} (${schema});`;
        // This "dryrun" is done to validate that the query statement is considered valid.
        // We check this before minting the token, so the caller won't succeed at minting a token
        // then fail to create the table on the Tableland network
        yield tablelandCalls.hash.call(this, query);
        const txn = yield registerTable.call(this, query);
        const [, event] = (_a = txn.events) !== null && _a !== void 0 ? _a : [];
        const txnHash = txn.transactionHash;
        const blockNumber = txn.blockNumber;
        const tableId = (_b = event === null || event === void 0 ? void 0 : event.args) === null || _b === void 0 ? void 0 : _b.tableId;
        const name = `${prefix}_${chainId}_${tableId}`;
        return { tableId, prefix, chainId, txnHash, blockNumber, name };
    });
}
//# sourceMappingURL=create.js.map