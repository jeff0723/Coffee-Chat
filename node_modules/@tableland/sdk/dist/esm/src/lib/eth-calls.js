var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable-next-line camelcase */
import { TablelandTables__factory } from "@tableland/evm";
import { getSigner } from "./util.js";
function registerTable(query) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
        const address = yield this.signer.getAddress();
        const contractAddress = this.options.contract;
        const contract = TablelandTables__factory.connect(contractAddress, this.signer);
        const tx = yield contract.createTable(address, query);
        return yield tx.wait();
    });
}
export { registerTable };
//# sourceMappingURL=eth-calls.js.map