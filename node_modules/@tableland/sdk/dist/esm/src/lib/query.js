/**
 * Send a SQL query to tableland network
 * @param query A SQL query to run
 * @returns If read query, result-set. If write query, nothing.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as tablelandCalls from "./tableland-calls.js";
export function resultsToObjects({ rows, columns }) {
    return rows.map((row) => Object.fromEntries(row.map((k, i) => [columns[i].name, k])));
}
export function read(query) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield tablelandCalls.read.call(this, query);
    });
}
export function write(query) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield tablelandCalls.write.call(this, query);
    });
}
//# sourceMappingURL=query.js.map